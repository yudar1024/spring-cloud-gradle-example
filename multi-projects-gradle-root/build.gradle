group 'multi-projects-gradle'
version '1.0-SNAPSHOT'

apply plugin: 'java'


sourceCompatibility = org.gradle.api.JavaVersion.VERSION_1_8
targetCompatibility = org.gradle.api.JavaVersion.VERSION_1_8


task wrapper(type: org.gradle.api.tasks.wrapper.Wrapper) {
    gradleVersion = '3.4'
    distributionUrl = "https://downloads.gradle.org/distributions/gradle-3.4-bin.zip"
}

repositories {
//    mavenLocal()
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url "http://maven.aliyun.com/nexus/content/repositories/gradleplugins/" }
    maven { url "http://maven.aliyun.com/nexus/content/repositories/jcenter/" }
    mavenCentral()
    jcenter()
}

buildscript {

    tasks.withType(org.gradle.api.tasks.compile.JavaCompile) {
        options.encoding = "UTF-8"
        options.incremental = true
    }
    repositories {
//        mavenLocal()
        maven { url "d:/repo/maven"}
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "http://maven.aliyun.com/nexus/content/repositories/gradleplugins/" }
        jcenter { url "http://maven.aliyun.com/nexus/content/repositories/jcenter/" }
        mavenCentral()
//        jcenter()
    }
}

dependencies {

    testCompile group: 'junit', name: 'junit', version: '4.11'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'


    sourceCompatibility = org.gradle.api.JavaVersion.VERSION_1_8
    targetCompatibility = org.gradle.api.JavaVersion.VERSION_1_8
    ext {
        springBootVersion = '1.4.3.RELEASE'
    }
    tasks.withType(org.gradle.api.tasks.compile.JavaCompile) {
        options.encoding = "UTF-8"
        options.incremental = true
    }
    repositories {
//        mavenLocal()
        maven { url "d:/repo/maven"}
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "http://maven.aliyun.com/nexus/content/repositories/gradleplugins/" }
        jcenter { url "http://maven.aliyun.com/nexus/content/repositories/jcenter/" }
        mavenCentral()
//        jcenter()
    }
    buildscript {
        repositories {
//          mavenLocal() 让 Gradle使用与Maven相同的策略去定位本地Maven缓存的位置。如果在settings.xml中定义了本地Maven仓库的地址，则使用该地址。在USER_HOME/.m2下的settings.xml文件中的配置会覆盖存放在M2_HOME/conf下的settings.xml文件中的配置。如果没有settings.xml配置文件，Gradle会使用默认的USER_HOME/.m2/repository地址。
            maven { url "d:/repo/maven"}
            maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
            maven { url "http://maven.aliyun.com/nexus/content/repositories/gradleplugins/" }
            jcenter { url "http://maven.aliyun.com/nexus/content/repositories/jcenter/" }
            mavenCentral()
//        jcenter()
        }

    }



    if (project.parent == null) {
        buildDir = new File(rootProject.buildDir, project.name)
    } else {
        buildDir = new File(project.parent.buildDir, project.name)
    }
}

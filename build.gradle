group 'com.roger.springcloud.gradle.example'
version '1.0-SNAPSHOT'

apply plugin: 'java'


sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8


task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
    distributionUrl = "https://downloads.gradle.org/distributions/gradle-3.3-bin.zip"
}

repositories {
    mavenLocal()
    maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
    maven { url "http://maven.aliyun.com/nexus/content/repositories/gradleplugins/" }
    maven { url "http://maven.aliyun.com/nexus/content/repositories/jcenter/" }
    mavenCentral()
    jcenter()
}

buildscript {
    ext {
//        springBootVersion = '1.4.0.RELEASE'
        springBootVersion = '1.4.3.RELEASE'
    }
    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.incremental = true
    }
    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "http://maven.aliyun.com/nexus/content/repositories/gradleplugins/" }
        maven { url "http://maven.aliyun.com/nexus/content/repositories/jcenter/" }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('com.bmuschko:gradle-docker-plugin:3.0.5')
//        classpath("com.jdroidframework:jdroid-gradle-plugin:0.10.1")
    }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: "io.spring.dependency-management"
    apply plugin: 'com.bmuschko.docker-remote-api'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    ext {
        springBootVersion = '1.4.3.RELEASE'
    }

    repositories {
        mavenLocal()
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        maven { url "http://maven.aliyun.com/nexus/content/repositories/gradleplugins/" }
        maven { url "http://maven.aliyun.com/nexus/content/repositories/jcenter/" }
        mavenCentral()
        jcenter()
    }
    buildscript {
        repositories {
//          mavenLocal() 让 Gradle使用与Maven相同的策略去定位本地Maven缓存的位置。如果在settings.xml中定义了本地Maven仓库的地址，则使用该地址。在USER_HOME/.m2下的settings.xml文件中的配置会覆盖存放在M2_HOME/conf下的settings.xml文件中的配置。如果没有settings.xml配置文件，Gradle会使用默认的USER_HOME/.m2/repository地址。
            mavenLocal()
            maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
            maven { url "http://maven.aliyun.com/nexus/content/repositories/gradleplugins/" }
            maven { url "http://maven.aliyun.com/nexus/content/repositories/jcenter/" }
            mavenCentral()
            jcenter()
        }
        dependencies {
            // 相当于maven的插件
            classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
            classpath('com.bmuschko:gradle-docker-plugin:3.0.5')
        }
    }

    dependencyManagement {
        imports {
            mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Camden.SR4'
        }
    }

    if (project.parent == null) {
        buildDir = new File(rootProject.buildDir, project.name)
    } else {
        buildDir = new File(project.parent.buildDir, project.name)
    }
}
